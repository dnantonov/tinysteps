import json
import os
import random
from collections import OrderedDict

from flask import Flask, render_template, request, redirect, url_for
from wtforms.validators import InputRequired, Length
from flask_wtf import FlaskForm
from wtforms import StringField, RadioField
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate


app = Flask(__name__)
app.secret_key = os.environ['SECRET_KEY']
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
migrate = Migrate(app, db)


WEEKDAYS = OrderedDict({
    "mon": {"short_ver": "–ü–Ω",
            "full_ver": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"},
    "tue": {"short_ver": "–í—Ç",
            "full_ver": "–í—Ç–æ—Ä–Ω–∏–∫"},
    "wed": {"short_ver": "–°—Ä",
            "full_ver": "–°—Ä–µ–¥–∞"},
    "thu": {"short_ver": "–ß—Ç",
            "full_ver": "–ß–µ—Ç–≤–µ—Ä–≥"},
    "fri": {"short_ver": "–ü—Ç",
            "full_ver": "–ü—è—Ç–Ω–∏—Ü–∞"},
    "sat": {"short_ver": "–°–±",
            "full_ver": "–°—É–±–±–æ—Ç–∞"},
    "sun": {"short_ver": "–í—Å",
            "full_ver": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
})

GOALS = OrderedDict({
    "travel": {"desc": "–¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", "icon": "‚õ±"},
    "study": {"desc": "–¥–ª—è —É—á–µ–±—ã", "icon": "üè´"},
    "work": {"desc": "–¥–ª—è —Ä–∞–±–æ—Ç—ã", "icon": "üè¢"},
    "relocate": {"desc": "–¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞", "icon": "üöú"},
    "coding": {"desc": "–¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "icon": "üíª"}
})


class Teacher(db.Model):
    __tablename__ = 'teacher'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    about = db.Column(db.Text, nullable=False)
    rating = db.Column(db.Float)
    picture = db.Column(db.String(80), unique=True, nullable=False)
    price = db.Column(db.Integer, nullable=False)
    goals = db.Column(db.String, nullable=False)
    free = db.Column(db.String, nullable=False)
    bookings = db.relationship('Booking',  back_populates="teacher")

class Booking(db.Model):
    __tablename__ = 'booking'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(40), nullable=False)
    phone = db.Column(db.String(40), nullable=False)
    day = db.Column(db.String(15), nullable=False)
    time = db.Column(db.String(15), nullable=False)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teacher.id'))
    teacher = db.relationship('Teacher', back_populates="bookings")

class Request(db.Model):
    __tablename__ = 'request'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(40), nullable=False)
    phone = db.Column(db.String(15), nullable=False)
    goal = db.Column(db.String(15), nullable=False)
    time = db.Column(db.String(15), nullable=False)

db.create_all()


class BookingForm(FlaskForm):
    name = StringField("–í–∞—Å –∑–æ–≤—É—Ç", validators=[InputRequired()])
    phone = StringField("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω", validators=[InputRequired()])


class RequestForm(FlaskForm):
    name = StringField("–í–∞—Å –∑–æ–≤—É—Ç", validators=[InputRequired()])
    phone = StringField("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω", validators=[InputRequired()])
    goal = RadioField(
        '–ö–∞–∫–∞—è —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π?', validators=[InputRequired()],
        choices=[('–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', '–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'), ('–î–ª—è —à–∫–æ–ª—ã', '–î–ª—è —à–∫–æ–ª—ã'),
                 ('–î–ª—è —Ä–∞–±–æ—Ç—ã', '–î–ª—è —Ä–∞–±–æ—Ç—ã'), ('–î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞', '–î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞')]
    )
    time = RadioField(
        '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å—Ç—å?', validators=[InputRequired()],
        choices=[('1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é', '1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é'), ('3-5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é', '3-5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'),
                 ('5-7 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é', '5-7 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'), ('7-10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é', '7-10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é')]
    )


@app.route('/')
def index():
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∏—Ç–∏–ª–µ–π –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = db.session.query(Teacher).all()
    random.shuffle(teachers)
    return render_template('index.html', teachers=teachers[:6])


@app.route('/all/', methods=['GET', 'POST'])
def all_teachers():
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    """
    sort = request.form.get('sort')
    if sort == "random":
        teachers = db.session.query(Teacher).all()
        random.shuffle(teachers)
    elif sort == "rating":
        teachers = db.session.query(Teacher).order_by(Teacher.rating.desc())
    elif sort == "expensive":
        teachers = db.session.query(Teacher).order_by(Teacher.price.desc())
    elif sort == "cheap":
        teachers = db.session.query(Teacher).order_by(Teacher.price)
    else:
        teachers = db.session.query(Teacher).all()
    teachers_quantity = db.session.query(Teacher).count()
    return render_template('all.html', teachers=teachers, teachers_quantity=teachers_quantity, sort=sort)


@app.route('/goals/<goal>/')
def teachers_by_goal(goal):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
    """
    # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î, –¥–æ—Å—Ç–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—à–µ–π —Ü–µ–ª—å—é –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    query = Teacher.query.filter(Teacher.goals.contains(goal))
    teachers = query.order_by(Teacher.rating.desc()).all()
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    goal = GOALS[goal]
    return render_template('goal.html', goal=goal, teachers=teachers)


@app.route('/profiles/<int:teacher_id>/')
def teacher_profile(teacher_id):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    """
    teacher = db.session.query(Teacher).get_or_404(teacher_id)
    teacher_goals = [GOALS[x] for x in eval(teacher.goals)] # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π —É—á–∏—Ç–µ–ª—è –ø–æ –∫–æ–¥—É —Ü–µ–ª–∏
    days = eval(teacher.free) # –ø—Ä–µ–æ–±–∞–∑—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–∞–∫–∏—Ö –¥–Ω—è—Ö –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
    free_days = {}
    for day in days.keys():
        free_days[day] = all(x is False for x in days[day].values())
    return render_template('profile.html', teacher=teacher,
                           goals=teacher_goals, days=days,
                           free_days=free_days)


@app.route('/request/', methods=['GET', 'POST'])
def request_select():
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã-–∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    """
    form = RequestForm()
    if request.method == 'POST':
        goal = request.form.get('goal')
        time = request.form.get('time')
        name = request.form.get('name')
        phone = request.form.get('phone')
        req = Request(name=name, phone=phone, goal=goal, time=time)
        db.session.add(req)
        db.session.commit()
        return render_template('request_done.html', goal=goal, time=time,
                               name=name, phone=phone)
    else:
        return render_template('request.html', form=form)


@app.route('/booking/<int:teacher_id>/<day>/<time>/', methods=['GET', 'POST'])
def booking_teacher(teacher_id, day, time):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã-–∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ
    """
    form = BookingForm()
    selected_day = WEEKDAYS[day]
    teacher = db.session.query(Teacher).get(teacher_id)
    if request.method == 'POST':
        name = request.form.get('name')
        phone = request.form.get('phone')
        day = WEEKDAYS[request.form.get('clientWeekday')]
        time = request.form.get('clientTime')
        booking = Booking(name=name, phone=phone, day=day['full_ver'], time=time, teacher=teacher)
        db.session.add(booking)
        db.session.commit()
        return render_template('booking_done.html', name=name,
                               phone=phone, day=day, time=time)
    else:
        return render_template('booking.html', teacher_id=teacher_id,
                               day=day, selected_day=selected_day,
                               time=time, teacher=teacher, form=form)


if __name__ == '__main__':
    app.run(port=5000, debug=True)
